/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FunctionSchemaService } from "../functionSchema.service";
import { FunctionSchemaCreateInput } from "./FunctionSchemaCreateInput";
import { FunctionSchema } from "./FunctionSchema";
import { FunctionSchemaFindManyArgs } from "./FunctionSchemaFindManyArgs";
import { FunctionSchemaWhereUniqueInput } from "./FunctionSchemaWhereUniqueInput";
import { FunctionSchemaUpdateInput } from "./FunctionSchemaUpdateInput";

export class FunctionSchemaControllerBase {
  constructor(protected readonly service: FunctionSchemaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FunctionSchema })
  async createFunctionSchema(
    @common.Body() data: FunctionSchemaCreateInput
  ): Promise<FunctionSchema> {
    return await this.service.createFunctionSchema({
      data: data,
      select: {
        arguments: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        outputType: true,
        requiredArguments: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FunctionSchema] })
  @ApiNestedQuery(FunctionSchemaFindManyArgs)
  async functionSchemas(
    @common.Req() request: Request
  ): Promise<FunctionSchema[]> {
    const args = plainToClass(FunctionSchemaFindManyArgs, request.query);
    return this.service.functionSchemas({
      ...args,
      select: {
        arguments: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        outputType: true,
        requiredArguments: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FunctionSchema })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async functionSchema(
    @common.Param() params: FunctionSchemaWhereUniqueInput
  ): Promise<FunctionSchema | null> {
    const result = await this.service.functionSchema({
      where: params,
      select: {
        arguments: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        outputType: true,
        requiredArguments: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FunctionSchema })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFunctionSchema(
    @common.Param() params: FunctionSchemaWhereUniqueInput,
    @common.Body() data: FunctionSchemaUpdateInput
  ): Promise<FunctionSchema | null> {
    try {
      return await this.service.updateFunctionSchema({
        where: params,
        data: data,
        select: {
          arguments: true,
          createdAt: true,
          description: true,
          id: true,
          name: true,
          outputType: true,
          requiredArguments: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FunctionSchema })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFunctionSchema(
    @common.Param() params: FunctionSchemaWhereUniqueInput
  ): Promise<FunctionSchema | null> {
    try {
      return await this.service.deleteFunctionSchema({
        where: params,
        select: {
          arguments: true,
          createdAt: true,
          description: true,
          id: true,
          name: true,
          outputType: true,
          requiredArguments: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
