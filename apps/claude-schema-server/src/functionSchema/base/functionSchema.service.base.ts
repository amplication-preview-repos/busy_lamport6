/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, FunctionSchema as PrismaFunctionSchema } from "@prisma/client";

export class FunctionSchemaServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FunctionSchemaCountArgs, "select">
  ): Promise<number> {
    return this.prisma.functionSchema.count(args);
  }

  async functionSchemas(
    args: Prisma.FunctionSchemaFindManyArgs
  ): Promise<PrismaFunctionSchema[]> {
    return this.prisma.functionSchema.findMany(args);
  }
  async functionSchema(
    args: Prisma.FunctionSchemaFindUniqueArgs
  ): Promise<PrismaFunctionSchema | null> {
    return this.prisma.functionSchema.findUnique(args);
  }
  async createFunctionSchema(
    args: Prisma.FunctionSchemaCreateArgs
  ): Promise<PrismaFunctionSchema> {
    return this.prisma.functionSchema.create(args);
  }
  async updateFunctionSchema(
    args: Prisma.FunctionSchemaUpdateArgs
  ): Promise<PrismaFunctionSchema> {
    return this.prisma.functionSchema.update(args);
  }
  async deleteFunctionSchema(
    args: Prisma.FunctionSchemaDeleteArgs
  ): Promise<PrismaFunctionSchema> {
    return this.prisma.functionSchema.delete(args);
  }
}
