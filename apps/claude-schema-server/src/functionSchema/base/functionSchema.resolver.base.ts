/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FunctionSchema } from "./FunctionSchema";
import { FunctionSchemaCountArgs } from "./FunctionSchemaCountArgs";
import { FunctionSchemaFindManyArgs } from "./FunctionSchemaFindManyArgs";
import { FunctionSchemaFindUniqueArgs } from "./FunctionSchemaFindUniqueArgs";
import { CreateFunctionSchemaArgs } from "./CreateFunctionSchemaArgs";
import { UpdateFunctionSchemaArgs } from "./UpdateFunctionSchemaArgs";
import { DeleteFunctionSchemaArgs } from "./DeleteFunctionSchemaArgs";
import { FunctionSchemaService } from "../functionSchema.service";
@graphql.Resolver(() => FunctionSchema)
export class FunctionSchemaResolverBase {
  constructor(protected readonly service: FunctionSchemaService) {}

  async _functionSchemasMeta(
    @graphql.Args() args: FunctionSchemaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FunctionSchema])
  async functionSchemas(
    @graphql.Args() args: FunctionSchemaFindManyArgs
  ): Promise<FunctionSchema[]> {
    return this.service.functionSchemas(args);
  }

  @graphql.Query(() => FunctionSchema, { nullable: true })
  async functionSchema(
    @graphql.Args() args: FunctionSchemaFindUniqueArgs
  ): Promise<FunctionSchema | null> {
    const result = await this.service.functionSchema(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FunctionSchema)
  async createFunctionSchema(
    @graphql.Args() args: CreateFunctionSchemaArgs
  ): Promise<FunctionSchema> {
    return await this.service.createFunctionSchema({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FunctionSchema)
  async updateFunctionSchema(
    @graphql.Args() args: UpdateFunctionSchemaArgs
  ): Promise<FunctionSchema | null> {
    try {
      return await this.service.updateFunctionSchema({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FunctionSchema)
  async deleteFunctionSchema(
    @graphql.Args() args: DeleteFunctionSchemaArgs
  ): Promise<FunctionSchema | null> {
    try {
      return await this.service.deleteFunctionSchema(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
